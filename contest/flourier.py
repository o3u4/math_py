import numpy as np
import matplotlib.pyplot as plt

lakes_name = ["Superior", "Michigan and Huron", "St. Clair", "Erie", 'Ontario']
lake = 0
dfs = [0, 0, 0, 0, 0]
dfs[0] = [[183.16, 183.08, 183.08, 183.12, 183.16, 183.24, 183.33, 183.31, 183.27, 183.2, 183.15, 183.06],
          [182.98, 182.94, 182.91, 183.01, 183.24, 183.33, 183.36, 183.39, 183.37, 183.3, 183.29, 183.3],
          [183.22, 183.14, 183.11, 183.14, 183.26, 183.31, 183.36, 183.4, 183.42, 183.44, 183.36, 183.26],
          [183.16, 183.07, 183.03, 183.08, 183.18, 183.23, 183.26, 183.29, 183.27, 183.26, 183.23, 183.19],
          [183.14, 183.07, 183.07, 183.13, 183.23, 183.35, 183.4, 183.42, 183.46, 183.47, 183.46, 183.38],
          [183.32, 183.27, 183.22, 183.26, 183.31, 183.39, 183.42, 183.38, 183.35, 183.38, 183.35, 183.3],
          [183.24, 183.18, 183.12, 183.16, 183.24, 183.3, 183.31, 183.3, 183.2, 183.13, 183.04, 182.98],
          [182.92, 182.83, 182.79, 182.85, 182.87, 182.94, 183, 183.01, 183.02, 183.18, 183.18, 183.11],
          [183.08, 183.03, 182.97, 183.01, 183.18, 183.29, 183.41, 183.42, 183.37, 183.32, 183.27, 183.19],
          [183.14, 183.1, 183.09, 183.12, 183.24, 183.3, 183.34, 183.39, 183.42, 183.36, 183.35, 183.3],
          [183.21, 183.14, 183.09, 183.08, 183.08, 183.13, 183.19, 183.2, 183.22, 183.19, 183.14, 183.07],
          [183, 182.93, 182.87, 182.91, 183.04, 183.15, 183.25, 183.28, 183.23, 183.21, 183.16, 183.09],
          [183.01, 182.94, 182.93, 183, 183.06, 183.2, 183.3, 183.27, 183.2, 183.12, 183.1, 183.05],
          [182.98, 182.94, 182.9, 182.92, 183.11, 183.26, 183.37, 183.44, 183.48, 183.45, 183.4, 183.35],
          [183.29, 183.24, 183.23, 183.27, 183.47, 183.6, 183.66, 183.67, 183.7, 183.71, 183.67, 183.6],
          [183.54, 183.47, 183.42, 183.44, 183.53, 183.63, 183.68, 183.68, 183.69, 183.6, 183.58, 183.59],
          [183.55, 183.49, 183.46, 183.48, 183.5, 183.61, 183.69, 183.7, 183.7, 183.68, 183.59, 183.54],
          [183.47, 183.43, 183.39, 183.41, 183.56, 183.67, 183.75, 183.78, 183.8, 183.81, 183.78, 183.72],
          [183.65, 183.58, 183.54, 183.47, 183.5, 183.56, 183.65, 183.65, 183.7, 183.77, 183.76, 183.67],
          [183.62, 183.58, 183.57, 183.61, 183.77, 183.84, 183.86, 183.86, 183.86, 183.88, 183.81, 183.74],
          [183.71, 183.64, 183.57, 183.62, 183.64, 183.7, 183.76, 183.81, 183.79, 183.76, 183.71, 183.63],
          [183.54, 183.46, 183.42, 183.48, 183.51, 183.55, 183.56, 183.54, 183.51, 183.48, 183.38, 183.31],
          [183.24, 183.17, 183.15, 183.24, 183.44, 183.57, 183.62, 183.65, 183.65, 183.6, 183.6, 183.57]]
dfs[1] = [[175.92, 175.87, 175.9, 175.92, 176, 176.1, 176.13, 176.13, 176.09, 175.98, 175.89, 175.81],
          [175.77, 175.78, 175.78, 175.85, 175.95, 176.06, 176.05, 176.03, 176.01, 176.03, 176.05, 176.05],
          [175.99, 175.95, 175.99, 176.06, 176.19, 176.29, 176.33, 176.32, 176.24, 176.14, 176.01, 175.91],
          [175.82, 175.75, 175.73, 175.82, 175.92, 176, 176.04, 176.02, 175.94, 175.87, 175.89, 175.9],
          [175.87, 175.84, 175.9, 175.98, 176.12, 176.31, 176.37, 176.33, 176.28, 176.15, 176.1, 176.08],
          [176.08, 176.1, 176.1, 176.14, 176.19, 176.21, 176.19, 176.17, 176.09, 176, 175.93, 175.88],
          [175.88, 175.92, 175.93, 176.01, 176.09, 176.14, 176.14, 176.13, 176.04, 175.99, 175.94, 175.98],
          [176.0, 175.91, 175.92, 176.02, 176.06, 176.08, 176.05, 176.0, 175.95, 175.88, 175.77, 175.68],
          [175.7, 175.76, 175.78, 175.92, 176.04, 176.16, 176.24, 176.22, 176.18, 176.09, 176.0, 175.97],
          [176.01, 176.01, 176.09, 176.2, 176.34, 176.42, 176.44, 176.44, 176.37, 176.29, 176.27, 176.22],
          [176.15, 176.11, 176.09, 176.11, 176.13, 176.19, 176.26, 176.24, 176.16, 176.07, 175.96, 175.86],
          [175.81, 175.78, 175.81, 175.91, 176.1, 176.21, 176.26, 176.24, 176.13, 176.08, 176.07, 176.04],
          [175.99, 175.96, 176.0, 176.03, 176.05, 176.07, 176.04, 175.97, 175.86, 175.74, 175.68, 175.61],
          [175.57, 175.61, 175.63, 175.75, 175.93, 176.05, 176.09, 176.08, 176.04, 176.01, 176.01, 175.97],
          [175.95, 175.95, 175.95, 176.06, 176.27, 176.38, 176.46, 176.48, 176.51, 176.54, 176.54, 176.53],
          [176.51, 176.5, 176.48, 176.53, 176.59, 176.68, 176.73, 176.72, 176.7, 176.58, 176.54, 176.55],
          [176.57, 176.56, 176.61, 176.77, 176.82, 176.84, 176.84, 176.82, 176.78, 176.69, 176.59, 176.51],
          [176.47, 176.48, 176.53, 176.66, 176.8, 176.88, 176.99, 177.0, 176.93, 176.87, 176.85, 176.79],
          [176.73, 176.74, 176.76, 176.79, 176.92, 176.98, 176.98, 176.94, 176.94, 176.89, 176.86, 176.83],
          [176.8, 176.82, 176.85, 176.96, 177.17, 177.31, 177.37, 177.32, 177.27, 177.28, 177.26, 177.24],
          [177.26, 177.24, 177.22, 177.29, 177.37, 177.44, 177.45, 177.42, 177.34, 177.25, 177.2, 177.14],
          [177.06, 176.99, 176.94, 176.94, 176.95, 176.93, 177.0, 177.01, 176.93, 176.9, 176.77, 176.69],
          [176.6, 176.54, 176.53, 176.66, 176.75, 176.8, 176.81, 176.79, 176.71, 176.6, 176.55, 176.46]]

dfs[3] = [[173.82, 173.75, 173.83, 173.95, 174.07, 174.18, 174.26, 174.22, 174.09, 174.0, 173.88, 173.83],
          [173.75, 173.84, 173.94, 174.02, 174.04, 174.09, 174.03, 173.94, 173.83, 173.8, 173.8, 173.86],
          [173.85, 173.97, 174.02, 174.2, 174.3, 174.33, 174.24, 174.15, 174.04, 173.95, 173.84, 173.81],
          [173.81, 173.73, 173.78, 173.97, 174.08, 174.17, 174.18, 174.17, 174.04, 173.92, 173.85, 173.89],
          [173.94, 173.85, 173.96, 174.12, 174.22, 174.36, 174.34, 174.29, 174.25, 174.07, 174.0, 174.01],
          [174.23, 174.26, 174.29, 174.38, 174.4, 174.32, 174.22, 174.14, 174.08, 174, 173.88, 173.84],
          [173.97, 174.06, 174.11, 174.16, 174.2, 174.25, 174.27, 174.23, 174.14, 174.08, 174.1, 174.15],
          [174.29, 174.22, 174.26, 174.32, 174.35, 174.26, 174.15, 174.13, 174.08, 173.94, 173.8, 173.86],
          [173.92, 174.09, 174.26, 174.39, 174.35, 174.32, 174.35, 174.23, 174.12, 174.0, 173.92, 173.96],
          [174.04, 174.07, 174.31, 174.42, 174.46, 174.45, 174.42, 174.35, 174.24, 174.13, 174.07, 174.02],
          [173.99, 173.92, 173.97, 174.09, 174.21, 174.31, 174.27, 174.19, 174.02, 173.97, 173.88, 173.86],
          [173.83, 173.75, 174.03, 174.2, 174.46, 174.58, 174.48, 174.38, 174.3, 174.27, 174.21, 174.4],
          [174.39, 174.37, 174.36, 174.31, 174.27, 174.22, 174.14, 174.04, 173.95, 173.82, 173.85, 173.82],
          [173.82, 173.86, 173.92, 174.02, 174.1, 174.23, 174.35, 174.28, 174.16, 174.07, 173.97, 173.94],
          [174.0, 173.94, 173.99, 174.2, 174.35, 174.4, 174.4, 174.37, 174.31, 174.25, 174.15, 174.17],
          [174.16, 174.03, 173.99, 174.22, 174.31, 174.53, 174.74, 174.62, 174.5, 174.34, 174.22, 174.17],
          [174.23, 174.27, 174.41, 174.6, 174.65, 174.61, 174.54, 174.46, 174.39, 174.33, 174.26, 174.17],
          [174.29, 174.4, 174.47, 174.64, 174.82, 174.83, 174.81, 174.7, 174.59, 174.49, 174.49, 174.44],
          [174.38, 174.44, 174.68, 174.77, 174.88, 174.89, 174.82, 174.72, 174.66, 174.57, 174.58, 174.6],
          [174.63, 174.61, 174.65, 174.83, 175.05, 175.14, 175.13, 175.02, 174.87, 174.74, 174.68, 174.68],
          [174.8, 174.9, 174.95, 175.05, 175.08, 175.1, 175.05, 174.93, 174.83, 174.72, 174.65, 174.65],
          [174.69, 174.57, 174.58, 174.63, 174.68, 174.71, 174.81, 174.79, 174.67, 174.67, 174.63, 174.58],
          [174.54, 174.43, 174.53, 174.59, 174.67, 174.68, 174.62, 174.55, 174.46, 174.32, 174.25, 174.2]]
dfs[4] = [[74.5, 74.45, 74.58, 74.82, 75.1, 75.26, 75.24, 75.06, 74.81, 74.61, 74.46, 74.47],
          [74.49, 74.55, 74.65, 74.84, 74.93, 74.99, 74.97, 74.82, 74.63, 74.53, 74.47, 74.52],
          [74.56, 74.68, 74.79, 74.98, 75.22, 75.33, 75.19, 74.91, 74.65, 74.49, 74.36, 74.32],
          [74.33, 74.29, 74.35, 74.73, 74.95, 75.12, 75.05, 74.99, 74.75, 74.63, 74.64, 74.73],
          [74.83, 74.75, 74.72, 74.89, 75.04, 75.14, 75.09, 75.02, 74.95, 74.7, 74.5, 74.55],
          [74.74, 74.85, 74.84, 75.03, 75.11, 75.02, 74.94, 74.79, 74.69, 74.6, 74.58, 74.55],
          [74.63, 74.86, 74.82, 74.83, 74.84, 74.89, 74.98, 74.95, 74.81, 74.74, 74.79, 74.83],
          [74.98, 74.97, 74.85, 75.01, 75.05, 74.98, 74.86, 74.71, 74.56, 74.42, 74.31, 74.32],
          [74.56, 74.75, 74.87, 75.18, 75.3, 75.19, 75.12, 75.06, 74.81, 74.6, 74.51, 74.55],
          [74.76, 74.82, 74.92, 75.12, 75.19, 75.16, 75.12, 75.03, 74.78, 74.6, 74.5, 74.48],
          [74.51, 74.54, 74.55, 74.66, 74.71, 74.85, 74.97, 74.9, 74.72, 74.61, 74.5, 74.52],
          [74.49, 74.41, 74.61, 74.85, 75.23, 75.33, 75.14, 74.94, 74.76, 74.66, 74.58, 74.62],
          [74.8, 74.99, 74.97, 74.92, 74.91, 74.9, 74.79, 74.65, 74.5, 74.34, 74.29, 74.28],
          [74.38, 74.52, 74.57, 74.72, 74.88, 75.1, 75.14, 74.99, 74.79, 74.64, 74.6, 74.53],
          [74.64, 74.61, 74.55, 74.83, 75.14, 75.17, 75.09, 74.96, 74.78, 74.59, 74.46, 74.46],
          [74.56, 74.5, 74.41, 74.62, 74.81, 75.02, 75.21, 75.11, 74.91, 74.67, 74.56, 74.47],
          [74.63, 74.82, 74.97, 75.11, 75.09, 75.02, 74.95, 74.84, 74.7, 74.54, 74.48, 74.46],
          [74.62, 74.82, 75.0, 75.35, 75.8, 75.81, 75.69, 75.43, 75.08, 74.86, 74.87, 74.77],
          [74.83, 74.9, 74.93, 75.01, 75.26, 75.22, 75.06, 74.91, 74.74, 74.62, 74.62, 74.71],
          [74.83, 74.97, 74.97, 75.15, 75.7, 75.91, 75.8, 75.53, 75.24, 75.04, 75.04, 75.0],
          [75.05, 75.12, 75.18, 75.32, 75.36, 75.29, 75.18, 75.05, 74.85, 74.7, 74.6, 74.62],
          [74.62, 74.53, 74.49, 74.62, 74.72, 74.71, 74.81, 74.85, 74.79, 74.78, 74.86, 74.87],
          [74.86, 74.88, 74.99, 75.13, 75.17, 75.13, 74.95, 74.74, 74.55, 74.41, 74.4, 74.47]]
data = np.array(dfs[lake])  # 将数据转换为NumPy数组

# 对数据进行二维傅里叶变换
fft_result = np.fft.fft2(data)
fft_result_shifted = np.fft.fftshift(fft_result)  # 将零频率移到频谱中心

# 计算傅里叶变换的频率分量
freqs_x = np.fft.fftfreq(data.shape[0])
freqs_y = np.fft.fftfreq(data.shape[1])
# 将频率转换为周期，避免除零错误并修正负数频率
periods_x = np.where(freqs_x > 0, 1 / freqs_x, np.inf)
periods_y = np.where(freqs_y > 0, 1 / freqs_y, np.inf)
# 找出傅里叶变换结果中的最大值的索引
max_idx = np.unravel_index(np.argmax(np.abs(fft_result_shifted), axis=None), fft_result_shifted.shape)
# 输出在两个维度上的周期性
print("X轴的周期为:", periods_x[max_idx[0]])
print("Y轴的周期为:", periods_y[max_idx[1]])

# 绘制原始二维数据
plt.figure(figsize=(10, 6))
plt.imshow(data, cmap='viridis', aspect='auto')
plt.title(f'{lakes_name[lake]}')
plt.xlabel('Month')
plt.ylabel('Year')
plt.colorbar()
plt.show()

# 绘制二维傅里叶变换结果
plt.figure(figsize=(10, 6))
plt.imshow(np.abs(fft_result_shifted), cmap='viridis', aspect='auto')
plt.title('2D Fourier Transform')
plt.xlabel('Month')
plt.ylabel('Frequency')
plt.colorbar()
plt.show()
